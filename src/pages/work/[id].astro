---
import Page from "../../comp/Page.astro";

export async function getStaticPaths() {
  const mdxs = await Astro.glob("../../content/work/*.md");
  const list = mdxs.map((md) => ({
    params: {
      id: md.frontmatter.id,
    },
    props: {
      markdown: md,
    },
  }));
  return list;
}

const { markdown } = Astro.props;
const { id, title, url, imgs } = markdown.frontmatter;
const { Content } = markdown;
---

<Page>
  <style is:global>
    body {
      background: rgb(49, 49, 49);
    }
  </style>
  <script is:inline></script>
  <div
    class=""
    x-data={`{ ix:0, imgs: ${JSON.stringify(imgs)} }`}
    @keydown.window.escape="window.history.back()"
  >
    <header class="px-10 mx-auto max-w-[1200px]">
      <div class="h-14 my-4 flex flex-row justify-between items-center">
        <a
          href="/portfolio/about"
          @click.prevent="window.history.back()"
          aria-label="Back"
          class="p-3 hover:bg-black"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="32"
            height="32"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
            class="rotate-180"
          >
            <line x1="5" y1="12" x2="19" y2="12"></line>
            <polyline points="12 5 19 12 12 19"></polyline>
          </svg>
        </a>
        <h1 class="heading text-xl">{title}</h1>
        <a
          href="/portfolio/about"
          @click.prevent="window.history.back()"
          aria-label="close"
          class="p-3 hover:bg-black text-xl"
        >
          X
        </a>
      </div>
    </header>
    <script is:inline>
      window.addEventListener("alpine:init", () => {
        Alpine.data("carousel", () => ({
          dir: "right",
          scrollBy(el) {
            const left = el.scrollLeft;
            const width = el.getBoundingClientRect().width;

            const reachedRight = left + width === el.scrollWidth;
            const reachedLeft = left === 0;

            if (this.dir === "right" && reachedRight) this.dir = "left";
            if (this.dir === "left" && reachedLeft) this.dir = "right";

            if (this.dir === "right")
              el.scrollBy({ left: width, behavior: "smooth" });
            else el.scrollBy({ left: -width, behavior: "smooth" });
          },
        }));
      });
    </script>
    <main class="relative mt-6 h-[60vh] max-h-[800px]" x-data="carousel">
      <div
        class="carousel px-10 w-full h-full flex flex-row overflow-auto gap-6 snap-x snap-mandatory hide-scrollbar"
        x-ref="scrollRef"
        :class=" imgs.length===1 ? ' justify-center':''"
      >
        <template x-for="(img,i) in imgs">
          <img
            class="flex-[0_0_auto] max-w-full h-full snap-center object-contain"
            :src="'/portfolio/work/'+img"
            alt={`${id} website image`}
            transition:name={`${id}-img`}
          />
        </template>
      </div>
      <div x-show="imgs.length>1">
        <button
          class="absolute top-1/2 right-10 bg-white w-14 h-14 rounded-full -translate-y-1/2 shadow-[2px_2px_8px_1px_rgba(0,0,0,0.6)]"
          @click="scrollBy($refs.scrollRef)"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
            fill="none"
            stroke="black"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
            class="chevron-right"
            :class="dir==='left'?' rotate-180':''"
          >
            <polyline points="9 18 15 12 9 6"></polyline>
          </svg>
        </button>
      </div>
      <div class="mt-8 max-w-[75ch] mx-auto">
        <p class="text-xl">
          Url :
          <a href={url}>
            {url}
          </a>
        </p>
        <div class="md">
          <Content />
        </div>
      </div>
    </main>
  </div>
</Page>

<style is:global>
  .md ul {
    padding-left: 1.5rem;
    list-style: disc;
  }
</style>
